pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
        }
    }
    environment {
        SONAR_URL = "http://3.6.88.85:9000" // SonarQube URL
        DOCKER_IMAGE = "akashn1996/ultimate-cicd:${BUILD_NUMBER}" // Docker Image Name
        GIT_REPO_NAME = "ultimate-cicd" // GitHub Repo Name
        GIT_USER_NAME = "arakashnawin" // GitHub Username
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }
        stage('Build and Test') {
            steps {
                sh '''
                    echo "Listing workspace contents:"
                    ls -ltr
                    echo "Building project and creating JAR file..."
                    cd spring-boot-app && mvn clean package
                '''
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        echo "Running SonarQube analysis..."
                        cd spring-boot-app && mvn sonar:sonar \
                            -Dsonar.login=$SONAR_AUTH_TOKEN \
                            -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        sh '''
                            echo "Building Docker image..."
                            cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .
                        '''
                        def dockerImage = docker.image("${DOCKER_IMAGE}")
                        docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                            dockerImage.push()
                        }
                        sh "docker rmi ${DOCKER_IMAGE}" // Clean up local Docker image
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        echo "Updating deployment YAML file..."
                        git config user.email "akashnawin18.ia@gmail.com"
                        git config user.name "arakashnawin"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                        
                        echo "Committing changes..."
                        git add spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                        
                        echo "Pushing changes to GitHub..."
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
    post {
        always {
            echo "Pipeline execution complete!"
        }
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline execution failed. Please check the logs."
        }
    }
}
